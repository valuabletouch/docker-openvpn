#!/usr/bin/env bash

#
# Generate OpenVPN configs
#

if [[ "$DEBUG" == "1" ]]; then
    set -x
fi

if [[ -z "${OPENVPN:-}" ]]; then
    export OPENVPN="$PWD"
fi

if [[ -z "${EASYRSA_PKI:-}" ]]; then
    export EASYRSA_PKI="$OPENVPN/pki"
fi

OPENVPN_CONF=$OPENVPN/openvpn.conf

OVPN_ENV=$OPENVPN/ovpn_env.sh

TMP_PUSH_CONFIGFILE=$(mktemp -t vpn_push.XXXXXXX)
TMP_ROUTE_CONFIGFILE=$(mktemp -t vpn_route.XXXXXXX)
TMP_EXTRA_CONFIGFILE=$(mktemp -t vpn_extra.XXXXXXX)

#Traceback on Error and Exit come from https://docwhat.org/tracebacks-in-bash/
set -eu

_showed_traceback=f

traceback() {
    # Hide the traceback() call.
    local -i start=$(( ${1:-0} + 1 ))
    local -i end=${#BASH_SOURCE[@]}
    local -i i=0
    local -i j=0

    echo "Traceback (last called is first):" 1>&2

    for ((i=$start; i < $end; i++)); do
        j=$(( $i - 1 ))

        local function="${FUNCNAME[$i]}"
        local file="${BASH_SOURCE[$i]}"
        local line="${BASH_LINENO[$j]}"

        echo "     $function() in $file:$line" 1>&2
    done
}

on_error() {
    local _ec="$?"
    local _cmd="${BASH_COMMAND:-unknown}"

    traceback 1

    _showed_traceback=t

    echo "The command $_cmd exited with exit code $_ec." 1>&2
}

trap on_error ERR

on_exit() {
    echo "Cleaning up before Exit ..."

    rm -f $TMP_PUSH_CONFIGFILE
    rm -f $TMP_ROUTE_CONFIGFILE
    rm -f $TMP_EXTRA_CONFIGFILE

    local _ec="$?"

    if [[ $_ec != 0 && "$_showed_traceback" != t ]]; then
        traceback 1
    fi
}

trap on_exit EXIT

# Convert 1.2.3.4/24 -> 255.255.255.0
cidr2mask() {
    local i
    local subnetmask=""
    local cidr=${1#*/}
    local full_octets=$(($cidr/8))
    local partial_octet=$(($cidr%8))

    for ((i=0; i<4; i++)); do
        if [[ $i -lt $full_octets ]]; then
            subnetmask+=255
        elif [[ $i -eq $full_octets ]]; then
            subnetmask+=$((256 - 2**(8-$partial_octet)))
        else
            subnetmask+=0
        fi

        if [[ $i -lt 3 ]]; then
            subnetmask+=.
        fi
    done

    echo $subnetmask
}

# Used often enough to justify a function
getroute() {
    echo ${1%/*} $(cidr2mask $1)
}

usage() {
    echo "usage: $0 [-d]"
    echo "                  -u SERVER_PUBLIC_URL"
    echo "                 [-e EXTRA_SERVER_CONFIG ]"
    echo "                 [-E EXTRA_CLIENT_CONFIG ]"
    echo "                 [-f FRAGMENT ]"
    echo "                 [-n DNS_SERVER ...]"
    echo "                 [-p PUSH ...]"
    echo "                 [-r ROUTE ...]"
    echo "                 [-s SERVER_SUBNET]"
    echo
    echo "optional arguments:"
    echo " -2    Enable two factor authentication using Google Authenticator."
    echo " -a    Authenticate  packets with HMAC using the given message digest algorithm (auth)."
    echo " -b    Disable 'push block-outside-dns'"
    echo " -c    Enable client-to-client option"
    echo " -C    A list of allowable TLS ciphers delimited by a colon (cipher)."
    echo " -d    Disable default route"
    echo " -D    Do not push dns servers"
    echo " -k    Set keepalive. Default: '10 60'"
    echo " -m    Set client MTU"
    echo " -N    Configure NAT to access external server network"
    echo " -t    Use TAP device (instead of TUN device)"
    echo " -T    Encrypt packets with the given cipher algorithm instead of the default one (tls-cipher)."
    echo " -z    Enable comp-lzo compression."
}

process_config() {
    local ovpn_config="$1"
    local nl_before=${2:-0}

    if [[ -n "$ovpn_config" ]]; then
        for ((i=0; i<nl_before; i++)); do
            echo "" >> "$OPENVPN_CONF"
        done

        echo "$ovpn_config" >> "$OPENVPN_CONF"
    fi
}

process_route_config() {
    local ovpn_route_config="$1"

    # If user passed "0" skip this, assume no extra routes
    if [[ "$ovpn_route_config" == "0" ]]; then
        break
    fi

    echo "Processing Route Config: '$ovpn_route_config'"

    if [[ -n "$ovpn_route_config" ]]; then
        echo "route $(getroute $ovpn_route_config)" >> "$TMP_ROUTE_CONFIGFILE"
    fi
}

process_push_config() {
    local ovpn_push_config="$1"

    ovpn_push_config="$1"

    echo "Processing PUSH Config: '$ovpn_push_config'"

    if [[ -n "$ovpn_push_config" ]]; then
        echo "push \"$ovpn_push_config\"" >> "$TMP_PUSH_CONFIGFILE"
    fi
}

process_extra_config() {
    local ovpn_extra_config="$1"

    echo "Processing Extra Config: '$ovpn_extra_config'"

    if [[ -n "$ovpn_extra_config" ]]; then
        echo echo "$ovpn_extra_config" >> "$TMP_EXTRA_CONFIGFILE"
    fi
}

set -e

OVPN_SUBNET=${OVPN_SUBNET:-10.8.0.0/24}
OVPN_SERVER=${OVPN_SERVER:-10.8.0.1}
OVPN_SERVER_URL=${OVPN_SERVER_URL:-}

OVPN_CN=''

OVPN_AUTH=SHA256
OVPN_CIPHER=AES-256-GCM
OVPN_TLS_CIPHER=TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384
OVPN_CLIENT_TO_CLIENT=''
OVPN_DEFROUTE=1
OVPN_DEVICE="tun"
OVPN_DEVICEN=0
OVPN_DISABLE_PUSH_BLOCK_DNS=0
OVPN_DNS=1
OVPN_DNS_SERVERS=()
OVPN_EXTRA_CLIENT_CONFIG=()
OVPN_EXTRA_SERVER_CONFIG=()
OVPN_FRAGMENT=''
OVPN_KEEPALIVE="10 60"
OVPN_MTU=''
OVPN_NAT=1
OVPN_PORT=${OVPN_PORT:-1194}
OVPN_PROTO=${OVPN_PROTO:-udp}
OVPN_PUSH=()
OVPN_ROUTES=()

# Import existing configuration if present
if [[ -r "$OVPN_ENV" ]]; then
    source "$OVPN_ENV"
fi

# Parse arguments
while getopts ":a:e:E:C:T:r:s:h:du:bcp:n:k:DNm:f:tz2" opt; do
    case $opt in
        a)
            OVPN_AUTH="$OPTARG"
            ;;

        e)
            mapfile -t TMP_EXTRA_SERVER_CONFIG <<< "$OPTARG"

            for i in "${TMP_EXTRA_SERVER_CONFIG[@]}"; do
                OVPN_EXTRA_SERVER_CONFIG+=("$i")
            done

            ;;

        E)
            mapfile -t TMP_EXTRA_CLIENT_CONFIG <<< "$OPTARG"

            for i in "${TMP_EXTRA_CLIENT_CONFIG[@]}"; do
                OVPN_EXTRA_CLIENT_CONFIG+=("$i")
            done

            ;;

        C)
            OVPN_CIPHER="$OPTARG"
            ;;

        T)
            OVPN_TLS_CIPHER="$OPTARG"
            ;;

        r)
            mapfile -t TMP_ROUTES <<< "$OPTARG"

            for i in "${TMP_ROUTES[@]}"; do
                OVPN_ROUTES+=("$i")
            done

            ;;

        s)
            OVPN_SUBNET="$OPTARG"
            ;;

        d)
            OVPN_DEFROUTE=0
            OVPN_DISABLE_PUSH_BLOCK_DNS=1
            ;;

        h)
            OVPN_SERVER="$OPTARG"
            ;;

        u)
            OVPN_SERVER_URL="$OPTARG"
            ;;

        b)
            OVPN_DISABLE_PUSH_BLOCK_DNS=1
            ;;

        c)
            OVPN_CLIENT_TO_CLIENT=1
            ;;

        p)
            mapfile -t TMP_PUSH <<< "$OPTARG"

            for i in "${TMP_PUSH[@]}"; do
                OVPN_PUSH+=("$i")
            done

            ;;

        n)
            mapfile -t TMP_DNS_SERVERS <<< "$OPTARG"

            for i in "${TMP_DNS_SERVERS[@]}"; do
                OVPN_DNS_SERVERS+=("$i")
            done

            ;;

        D)
            OVPN_DNS=0
            ;;

        N)
            OVPN_NAT=1
            ;;

        k)
            OVPN_KEEPALIVE="$OPTARG"
            ;;

        m)
            OVPN_MTU="$OPTARG"
            ;;

        t)
            OVPN_DEVICE="tap"
            ;;

        2)
            OVPN_OTP_AUTH=1
            ;;

        f)
            OVPN_FRAGMENT="$OPTARG"
            ;;

        \?)
            set +x
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;

        :)
            set +x
            echo "Option -$OPTARG requires an argument." >&2
            usage
            exit 1
            ;;
    esac
done

# Create ccd directory for static routes
if [[ ! -d "${OPENVPN:-}/ccd" ]]; then
    mkdir -p ${OPENVPN:-}/ccd
fi

# Server name is in the form "udp://vpn.example.com:1194"
if [[ "${OVPN_SERVER_URL:-}" =~ ^((udp|tcp|udp6|tcp6)://)?([0-9a-zA-Z\.\-]+)(:([0-9]+))?$ ]]; then
    OVPN_PROTO=${BASH_REMATCH[2]};
    OVPN_CN=${BASH_REMATCH[3]};
    OVPN_PORT=${BASH_REMATCH[5]};
else
    set +x
    echo "Common name not specified, see '-u'"
    usage
    exit 1
fi

# Apply defaults. If dns servers were not defined with -n, use CloudFlare nameservers
set +u

if [[ -z "$OVPN_PROTO" ]]; then
    OVPN_PROTO=udp
fi

if [[ -z "$OVPN_PORT" ]]; then
    OVPN_PORT=1194
fi

if [[ -z "$OVPN_DNS_SERVERS" ]]; then
    OVPN_DNS_SERVERS=("1.1.1.1" "1.0.0.1")
fi

set -u

if [[ "${#OVPN_ROUTES[@]}" == "0" && "$OVPN_DEFROUTE" == "1" ]]; then
    OVPN_ROUTES+=("$OVPN_SUBNET")
fi

# Preserve config
if [[ -f "$OVPN_ENV" ]]; then
    bak_env=$OVPN_ENV.$(date +%s).bak

    echo "Backing up $OVPN_ENV -> $bak_env"

    mv "$OVPN_ENV" "$bak_env"
fi

# Save the current OVPN_ vars to the ovpn_env.sh file
(set | grep '^OVPN_') | while read -r var; do
    echo "declare -x $var" >> "$OVPN_ENV"
done

if [[ -f "$OPENVPN_CONF" ]]; then
    bak=$OPENVPN_CONF.$(date +%s).bak

    echo "Backing up $OPENVPN_CONF -> $bak"

    mv "$OPENVPN_CONF" "$bak"
fi

# Echo extra client configurations
if [[ ${#OVPN_EXTRA_CLIENT_CONFIG[@]} -gt 0 ]]; then
    for i in "${OVPN_EXTRA_CLIENT_CONFIG[@]}"; do
        echo "Processing Extra Client Config: $i"
    done
fi

cat << EOF > "$OPENVPN_CONF"
verb 4

server $(getroute $OVPN_SUBNET)

proto $OVPN_PROTO
port 1194

keepalive $OVPN_KEEPALIVE

ca $EASYRSA_PKI/ca.crt
dh $EASYRSA_PKI/dh.pem

key $EASYRSA_PKI/private/$OVPN_CN.key
cert $EASYRSA_PKI/issued/$OVPN_CN.crt

tls-crypt $EASYRSA_PKI/ta.key

persist-key

dev $OVPN_DEVICE$OVPN_DEVICEN

persist-tun

status /tmp/openvpn-status.log

user nobody
group nogroup

EOF

if [[ -n "$OVPN_CIPHER" ]]; then
    process_config "cipher $OVPN_CIPHER"
fi

if [[ -n "$OVPN_TLS_CIPHER" ]]; then
    process_config "tls-cipher $OVPN_TLS_CIPHER"
fi

if [[ -n "$OVPN_AUTH" ]]; then
    process_config "auth $OVPN_AUTH"
fi

if [[ -n "${OVPN_CLIENT_TO_CLIENT:-}" ]]; then
    process_config "client-to-client" 1
fi

if [[ -n "${OVPN_FRAGMENT:-}" ]]; then
    process_config "fragment $OVPN_FRAGMENT" 1
fi

# Append route commands
if [[ ${#OVPN_ROUTES[@]} -gt 0 ]]; then
    for i in "${OVPN_ROUTES[@]}"; do
        process_route_config "$i"
    done

    process_config "### Route Configurations ###" 1

    cat $TMP_ROUTE_CONFIGFILE >> "$OPENVPN_CONF"
fi

# Append extra server configurations
if [[ ${#OVPN_EXTRA_SERVER_CONFIG[@]} -gt 0 ]]; then
    for i in "${OVPN_EXTRA_SERVER_CONFIG[@]}"; do
        process_extra_config "$i"
    done

    process_config "### Extra Configurations ###" 1

    cat $TMP_EXTRA_CONFIGFILE >> "$OPENVPN_CONF"
fi

# Append optional OTP authentication support
if [[ -n "${OVPN_OTP_AUTH:-}" ]]; then
    process_config "### OTP + PAM Configurations ###" 1
    process_config "plugin /usr/lib/openvpn/plugins/openvpn-plugin-auth-pam.so openvpn"
    process_config "reneg-sec 0"
fi

if [[ "$OVPN_DISABLE_PUSH_BLOCK_DNS" == "1" ]]; then
    echo "Disable default push of 'block-outside-dns'"
else
    process_push_config "block-outside-dns"
fi

process_push_config "dhcp-option DNS $OVPN_SERVER"

# Append push commands
if [[ "$OVPN_DNS" == "1" ]]; then
    for i in "${OVPN_DNS_SERVERS[@]}"; do
        process_push_config "dhcp-option DNS $i"
    done
fi

if [[ ${#OVPN_PUSH[@]} -gt 0 ]]; then
    for i in "${OVPN_PUSH[@]}"; do
        process_push_config "$i"
    done
fi

process_config "### Push Configurations ###" 1

cat $TMP_PUSH_CONFIGFILE >> "$OPENVPN_CONF"

set +e

# Clean-up duplicate configs
if diff -q "${bak_env:-}" "$OVPN_ENV" 2>/dev/null; then
    echo "Removing duplicate back-up: $bak_env"

    rm -fv "$bak_env"
fi

if diff -q "${bak:-}" "$OPENVPN_CONF" 2>/dev/null; then
    echo "Removing duplicate back-up: $bak"

    rm -fv "$bak"
fi

echo "Successfully generated config"
